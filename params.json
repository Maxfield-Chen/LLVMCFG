{
  "name": "LLVMCFG",
  "tagline": "LLVM Pass for dynamic CFG generation",
  "body": "###### Notice, this project is WIP\r\n\r\nLLVMCFG is an llvm pass that modifies the code generation phase of the clang compiler. Given some source code, the generated code will keep track of all branches taken at runtime, and outputs a dynamically computed control flow graph. This project was inspired by the `cbr.c` and `cbrtrace.c` samples in the DynamoRIO code base which compute the control flow dynamically using dynamic binary instrumentation.\r\n\r\n# Implementation\r\n\r\nWe are mainly targeting dynamically computed control flow instructions, for example conditional branches. We will transform an llvm IR control flow instruction into the following instrumentation:\r\n\r\n``` {.nasm}\r\n  cbr label\r\n\r\n  call __at_not_taken(src, fall)\r\n  jmp fallthrough\r\n\r\nlabel:\r\n  call __at_token(src, targ)\r\n  jmp target\r\n\r\nfallthrough:\r\n  ...\r\n```\r\n\r\nHere, we clobber the original cbr instruction (labeled cbr) and we force it instead to jump to our label. This label was taken, so we know that the original branch would have been taken, and we note it as such (by calling `__at_token()`. Otherwise, we fell through and called the `__at_not_token()`. In this manner we build up the dynamic control flow graph and dump it to a file.\r\n\r\n# Applications\r\n\r\n## Branch Coverage\r\nOnce we have constructed the dynamically computed CFG, we can \"diff\" this against a more complete, statically computed control flow graph in order to determine which branches were not taken at runtime.\r\n\r\n## Static Analysis Aide\r\nSometimes certain static analysis tools like IDA and radare2 will miss certain dynamic control flow instructions (`[call|jmp] rax`) as they are computationally hard to determine statically. Examples of these include switch-case statements and jump tables. Given a \"good\" execution of a program, we can likely reconstruct a good portion of the switch-case statement very simply.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}